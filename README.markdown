# Overview
Generator for RDoc that lets you do in-code documentation of REST APIs and generate online documentation for them as easily as generating Ruby documentation.

To run with the default template, just do `rdoc --fmt rest`

You can strip part of the path for storing files by setting a STRIP_PATH env. For example, STRIP_PATH="app/controllers/" will make sure all controllers are stored without the "app/controllers" path

# Example
See examples/ for example syntax as well as the end result.

# Syntax
By default, all API methods are private unless otherwise specified. If an API is private or protected scoped in Ruby it will not show up regardless of api_status._

Class arguments:

- `class_file` - The name of the class file, overrides the classes name
- `api_status` - Global setting if the controller is *public* or *private*, by default controllers are public and methods are private
- `path` - Root path for the class, if you set /foo/ then every public method will have /foo/ prefixed to the path. Ignored when using route detection

Method arguments:

- `method_name` - The name of the method, overrides the method name
- `api_status` - Per-method setting of the API, by default all API methods are private
- `returns` - Generic field for what the API returns, can be used if you want to add automatic JSON highlighting or pretty printing
- `path` - Path to the API request

# Customization
As this is intended for REST API documentation rather than code documentation, it's assumed you will want some level of customization. The default template in lib/rdoc/generator/template/rest is only intended as an example or starting point.

RDoc will only find templates that are structured as rdoc/generator/template/<template name>/ and can be found through $LOAD_PATH. For example, if you're using Rails and create a template located at ./rdoc/generator/template/foobar/ in your Rails root, you can then use `rdoc --template="foobar" --fmt rest` to use the custom template.

# Route detection
If you are using Rails, you can use `rake rest:generate` rather than having to manually specify the path for every API. To avoid including (.:format) at the end of every URL, call `rake rest:generate no_format=1`. You will need to include rdoc_rest in your Gemfile to access the rake task automatically.

When using route detection, you must call rdoc from the root Rails directory. The generator looks at ./tmp/routes.txt to find the routing information generated by rake.

You can also write the data yourself, it's just stored as YAML with the key being the full file path + method name.

    ---
    app/controllers/api/foo_controller.rb/apple:
      :type: GET
      :path: /api/foo/apple(.:format)
    app/controllers/api/bar_controller.rb/orange:
      :type: POST
      :path: /api/bar/orange(.:format)

# License
Dual licensed under GPL and MIT, take your pick!
